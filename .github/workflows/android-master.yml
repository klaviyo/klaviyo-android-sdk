# A workflow for controlling the actions taken by CI whenever we merge code into master

name: Android Test App Master CI

# Triggers the workflow on when code is merged into master
on:
  push:
    branches:
      - 'master'

jobs:
  # A job for running our tests
  test:
    name: Run Unit Tests

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - uses: actions/checkout@v2

      # Sets up a JDK on the job so that we can run Java code
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          java-package: jdk

      # Call Gradle to run the unit tests
      - name: Unit Tests
        run: bash ./gradlew test --stacktrace
  ktlint:
    name: Run ktlintCheck

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - uses: actions/checkout@v2

      # Sets up a JDK on the job so that we can run Java code
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          java-package: jdk

      # Call Gradle to run ktlint check
      - name: KtlintCheck
        run: bash ./gradlew ktlintCheck
  apk:
    name: Generate APK
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    needs: test

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - uses: actions/checkout@v2

      # Sets up a JDK on the job so that we can run Java code
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
          java-package: jdk

      # Call Gradle to build our debug APK
      - name: Build debug APK
        run: bash ./gradlew assembleDebug --stacktrace

      # Stores the generated APK to an outputs folder
      - name: Store APK
        uses: actions/upload-artifact@v2
        with:
          name: test-app
          path: app/build/outputs/apk/debug/apk-debug.apk

