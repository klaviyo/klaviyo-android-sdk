// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        publishBuildVariant = "release"
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // NOTE: These are dependencies for the build script itself
        // Do not place your application dependencies here;
        // they belong in the individual module build.gradle files
        classpath Android.tools.build.gradlePlugin
        classpath Kotlin.gradlePlugin
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:_"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:_"
    }
}

plugins {
    //Project-wide dependencies
    id "org.jetbrains.dokka"
    id "org.jlleitschuh.gradle.ktlint"
}

dependencies {
    dokkaHtmlMultiModulePlugin "org.jetbrains.dokka:versioning-plugin:_"
}

tasks.register("clean", Delete) {
    delete rootProject.layout.buildDirectory
}

static def readXmlValue(String filePath, String tagName, Project project) {
    def xmlFile = new File(project.projectDir, filePath)
    // Check if the file exists
    if (!xmlFile.exists()) {
        throw new FileNotFoundException("The XML file does not exist: ${xmlFile.absolutePath}")
    }

    // Parse the XML file
    def xmlContent
    try {
        xmlContent = new XmlSlurper().parse(xmlFile)
    } catch (Exception e) {
        throw new RuntimeException("Failed to parse XML file: ${xmlFile.absolutePath}. Error: ${e.message}", e)
    }

    // Look for the string with the specific name attribute
    def result = xmlContent.'string'.find { it.@name == tagName }

    if (result == null) {
        throw new IllegalArgumentException("No string found with the name '${tagName}' in the file: ${xmlFile.absolutePath}")
    }

    return result.text()
}

dokkaHtmlMultiModule {
    def versionName = readXmlValue('sdk/core/src/main/res/values/strings.xml','klaviyo_sdk_version_override', project)
    def oldVersionsDir = layout.buildDirectory.dir("../docs/")
    outputDirectory = layout.buildDirectory.dir("../docs/${versionName}")
    includes.from("README.md")

    String versioningConfiguration = """
        {
          "version": "${versionName}",
          "olderVersionsDir": "${oldVersionsDir}"
        }
    """

    pluginsMapConfiguration.set(
        ["org.jetbrains.dokka.versioning.VersioningPlugin": versioningConfiguration]
    )
}

apply from: "versioning.gradle"