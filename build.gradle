// Top-level build file where you can add configuration options common to all sub-projects/modules.
import static de.fayard.refreshVersions.core.Versions.versionFor

buildscript {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath Android.tools.build.gradlePlugin
        classpath Kotlin.gradlePlugin

        // Needed (alongside the google-services.json) to connect to google services and use fcm logic in our sdk
        classpath Google.playServicesGradlePlugin

        // Add the dependency for the Crashlytics Gradle plugin
        classpath Firebase.crashlyticsGradlePlugin

        classpath "org.jlleitschuh.gradle:ktlint-gradle:_"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: "org.jlleitschuh.gradle.ktlint"

tasks.register("clean", Delete) {
    delete rootProject.layout.buildDirectory
}

/**
 * Command to bump the version of the project and keep in sync with the SDK version
 */
public class BumpVersion extends DefaultTask {
    private String nextVersion;

    @Option(option = "nextVersion", description = "New semantic version number")
    public void setNextVersion(String nextVersion) {
        this.nextVersion = nextVersion;
    }

    @Input
    public String getNextVersion() {
        return nextVersion;
    }

    @TaskAction
    public void bumpVersion() {
        //Warning: disable composite build first
        def currentVersion = versionFor(project, "version.klaviyo.versionName") as String
        def nextVersion = this.getNextVersion()
        def currentBuild = versionFor(project, "version.klaviyo.versionCode") as Integer
        def nextBuild = currentBuild + 1
        print("Changing semantic version number from $currentVersion to $nextVersion\n")
        print("Auto-incrementing version code from $currentBuild to $nextBuild\n")

        ant.replace(file:"versions.properties", token:"versionCode=$currentBuild", value:"versionCode=$nextBuild")
        ant.replace(file:"versions.properties", token:"versionName=$currentVersion", value:"versionName=$nextVersion")
        ant.replace(file:"versions.properties", token:"core=$currentVersion", value:"core=$nextVersion")
        ant.replace(file:"versions.properties", token:"analytics=$currentVersion", value:"analytics=$nextVersion")
        ant.replace(file:"versions.properties", token:"push-fcm=$currentVersion", value:"push-fcm=$nextVersion")
    }
}

tasks.register("bumpVersion", BumpVersion)
