// Top-level build file where you can add configuration options common to all sub-projects/modules.
import static de.fayard.refreshVersions.core.Versions.versionFor

buildscript {
    ext {
        publishBuildVariant = "release"
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // NOTE: These are dependencies for the build script itself
        // Do not place your application dependencies here;
        // they belong in the individual module build.gradle files
        classpath Android.tools.build.gradlePlugin
        classpath Kotlin.gradlePlugin
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:_"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:_"
    }
}

plugins {
    //Project-wide dependencies
    id "org.jetbrains.dokka"
    id "org.jlleitschuh.gradle.ktlint"
}

dependencies {
    dokkaHtmlMultiModulePlugin "org.jetbrains.dokka:versioning-plugin:_"
}

tasks.register("clean", Delete) {
    delete rootProject.layout.buildDirectory
}

dokkaHtmlMultiModule {
    def versionName = versionFor(project, "version.klaviyo.versionName") as String
    def oldVersionsDir = layout.buildDirectory.dir("../docs/")
    outputDirectory = layout.buildDirectory.dir("../docs/${versionName}")
    includes.from("README.md")

    String versioningConfiguration = """
        {
          "version": "${versionName}",
          "olderVersionsDir": "${oldVersionsDir}"
        }
    """

    pluginsMapConfiguration.set(
        ["org.jetbrains.dokka.versioning.VersioningPlugin": versioningConfiguration]
    )
}

/**
 * Command to bump the version of the project
 * including updating README and documentation references
 */
public class BumpVersion extends DefaultTask {
    private String nextVersion;

    @Option(option = "nextVersion", description = "New semantic version number")
    public void setNextVersion(String nextVersion) {
        this.nextVersion = nextVersion;
    }

    @Input
    public String getNextVersion() {
        return nextVersion;
    }

    @TaskAction
    public void bumpVersion() {
        def currentVersion = versionFor(project, "version.klaviyo.versionName") as String
        def nextVersion = this.getNextVersion()
        def currentBuild = versionFor(project, "version.klaviyo.versionCode") as Integer
        def nextBuild = currentBuild + 1
        print("Changing semantic version number from $currentVersion to $nextVersion\n")
        print("Auto-incrementing version code from $currentBuild to $nextBuild\n")

        ant.replace(file:"versions.properties", token:"versionCode=$currentBuild", value:"versionCode=$nextBuild")
        ant.replace(file:"versions.properties", token:"versionName=$currentVersion", value:"versionName=$nextVersion")
        ant.replace(file:"README.md", token:"analytics:$currentVersion", value:"analytics:$nextVersion")
        ant.replace(file:"README.md", token:"push-fcm:$currentVersion", value:"push-fcm:$nextVersion")
        ant.replace(file:"docs/index.html", token:"$currentVersion", value:"$nextVersion")
    }
}

tasks.register("bumpVersion", BumpVersion)
